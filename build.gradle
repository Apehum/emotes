buildscript {
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
	}
}

plugins {
	id 'fabric-loom' version '0.6-SNAPSHOT'
	id 'maven-publish'
}
apply plugin: 'com.jfrog.bintray'

boolean keys_imported = new File("keys.properties").exists()

if(keys_imported) {
	file("keys.properties").withReader {
		Properties props = new Properties()
		props.load(it)
		project.ext.keys = props
	}
}
repositories{
	//mavenLocal()
	jcenter()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "${project.archives_base_name}-for-MC${project.minecraft_version}"
version = project.mod_version
group = project.maven_group

minecraft {
	//accessWidener = file("src/main/resources/emotecraft.accesswidener")
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"
	include "io.github.prospector:modmenu:${project.modmenu_version}"
	modImplementation "me.shedaniel.cloth:config-2:${project.cloth_version}"
	include "me.shedaniel.cloth:config-2:${project.cloth_version}"

	modImplementation "com.kosmx.bendylib:bendy-lib:${project.bendylib_version}"
	include "com.kosmx.bendylib:bendy-lib:${project.bendylib_version}"

	//include(files("bendy-lib-0.0.0-dev.jar"))

}

tasks.withType(JavaCompile){
	options.compilerArgs << '-Xlint:unchecked'
	options.deprecation = true	//deprecated warning on compile
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		mavenLocal()
	}
	dependencies {
		//@Nullable essential for mc modding
		compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
	}
}

bintray {
	if(keys_imported) {
		user = project.keys.bintray_user
		key = project.keys.bintray_key
	}
	pkg {
		repo = 'Emotecraft'
		name = 'Emotecraft'
		//userOrg = 'kosmx'
		licenses = ['CC0-1.0']
		vcsUrl = 'https://github.com/KosmX/emotes.git'
		version {
			version {
				name = project.version
				desc = 'Minecraft mod'
				githubRepo = "kosmx/emotes"
				released  = new Date()
				vcsTag = project.version
				//attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
			}
		}
	}
	publications = ['mavenJava']
}