/*
This build.gradle has been tweaked. Don't build other mods with this or this with the default Fabric.
 */

buildscript {
    /*repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }*/
    dependencies {
        //Jfrog for auto publish on jcenter
        //classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
        //classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

plugins {
    //id 'forgified-fabric-loom' version '0.6-SNAPSHOT' //Forge loom :D
    //id "architectury-plugin" version "3.0-SNAPSHOT"
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "6.1.0"
}
apply plugin: 'forgified-fabric-loom'
apply plugin: 'architectury-plugin'

architectury{
    platformSetupLoomIde()
    fabric()
}

loom{
    silentMojangMappingsLicense()
}

//Import jfrog keys from file (not included in the git repo :D)
//and well... serialize it
repositories{
    mavenLocal()
    //jcenter()
    maven{
        url "https://maven.terraformersmc.com/releases"
    }
}

//sourceCompatibility = JavaVersion.VERSION_1_8 //These are configured by the main gralde.build (hopefully)
//targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "${project.archives_base_name}-for-MC${project.minecraft_version}" //TODO what?
version = project.mod_version
group = project.maven_group


minecraft {
    //accessWidener = file("src/main/resources/emotecraft.accesswidener")
}
configurations {
    compileModule
}

dependencies {
    implementation project(':executor')
    implementation project(':emotecraftCommon')
    implementation project(':emotesServer')

    implementation(project(path: ":archCommon"))
    implementation project(':emotesMain')
    developmentFabric(project(path: ":emotesMain")) { transitive = false }
    developmentFabric(project(path: ":archCommon")) { transitive = false }

    compileModule(project(path: ":archCommon")) { transitive = false }
    compileModule(project(':emotesMain')){ transitive = false }
    compileModule project(':executor')
    compileModule project(':emotecraftCommon')
    compileModule project(':emotesServer')


    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    //mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    include "com.terraformersmc:modmenu:${project.modmenu_version}"
    //modImplementation "me.shedaniel.cloth:config-2:${project.cloth_version}"
    //include "me.shedaniel.cloth:config-2:${project.cloth_version}"

    modImplementation "io.github.kosmx:bendy-lib:${project.bendylib_version}"
    include "io.github.kosmx:bendy-lib:${project.bendylib_version}"
    //
    //other dependency(ies)

    //modImplementation "pm.c7.perspective:PerspectiveModRedux:0.0.5"


    //compileOnly files("replaymod-1.16.4-2.5.1-2-g57c7362-dirty-dev.jar", "jGui-1.16.4-git-dev.jar")


    //Spigot stuff
    //implementation("org.spigotmc:spigot-api:${project.spigot_api}")//Spigot will be a different module...

    //runtime files("replaymod-1.16.4-2.5.1-2-g57c7362-dirty-dev.jar", "jGui-1.16.4-git-dev.jar")

}

tasks.withType(JavaCompile){
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true	//deprecated warning on compile
}


processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}


// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

shadowJar{
    configurations = [project.configurations.compileModule]
    classifier "fabric-dev"
}

remapJar{
    dependsOn shadowJar
    input.set shadowJar.archiveFile
    classifier "fabric"
}

jar {
    //from {
    //    configurations.compileModule.collect { it.isDirectory() ? it : zipTree(it) }
    //}
    from "LICENSE"
}



// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy remapJar
            }
            //artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
            //	builtBy remapJar
            //}
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        mavenLocal()
    }
}
